[Jenkins 설치 진행]
--종속 패키지 설치
yum install -y wget maven git docker
(JDK가 같이 설치되나 버전 문제로 인해 JDK 11로 변경 필요.)

--jdk 버전 변경
yum install -y java-11-openjdk-devel.x86_64
update-alternatives --config java (11버전으로 변경)

$which java
/bin/java

$readlink -f /bin/java
/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64/bin/java

vi /etc/profile
=================================================
JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64
PATH=$PATH:$JAVA_HOME/bin
CLASSPATH=$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar

=================================================

source /etc/profile 

(JDK는 Slave NODE에도 설치)

--jenkins 설치
wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

yum install jenkins
systemctl start jenkins 
systemctl status jenkins
*오류나면 jenkins -version 으로 확인해보기..

URL : localhost:8080

cat /var/lib/jenkins/secrets/initialAdminPassword 의 내용을 복사하여 붙이고 플러그인 설치 진행.

*접속후 jenkins 관리 > Plugins > available Plugins 에서  ssh 검색 >  Public Over SSH 선택하여 설치 

- Public Over SSH 설정 
	jenkins 관리 >SYSTEM > Publish over SSH 
	key 부분에 개인키 입력 
	ssh Server에 Slave Node 정보 입력  
	(name : Node 이름
	hostname : Node ip 
	Username : ssh 접속 user명 (root로 설정함)
	Remote Directory : 접속 시 기본 디렉토리)

	Test Configuration에서 성공하면 완료.

[ssh로 Slave NODE 연결]

-노드 연결시 체크 사항 
	* JDK 설치 (version : 11)
	* SSH 공개키 등록 ( Authorized_keys에 Master 노드 공개키 입력)
	* 22port OPEN 상태 

- SSH 키 교환 및 Cendidental 등록 
	마스터 노드에서 ssh-keygen -t rsa -f ~/.ssh/id_rsa 
		( openssl rsa -in id_rsa -outform PEM -out id_rsa.pem > pem파일 생성하여 scp등에서 사용 )
	Slave 노드의 ~/.ssh/authorized_keys 공개키 입력 후 접속 확인

- Slave Node추가 
jenkins 관리 > Nodes > New Node

노드명 입력 및 Permanent Agent 선택 후 create
* Slave Node 옵션 
	-Number of executors : 한번에 진행가능한 JOB개수 결정 
	-Labels : slave (임의로 지정 후  pipeline 스크립트 등에서 명시하여 사용)
	-Remote root directory : /root/jenkins ( 미리 디렉토리 생성 필요 )
	-Launch method : Launch agents via SSH 
	-Host : Slave Node IP
	-Credentials : 없는 경우 새로 추가 
		-jenkins credentials provider: Jenkins 
			-domain : global 
			-kind : SSH Username with private Key
			-scope : global 
			-ID : 임의로 지정 
			-UserName : SSH 접속계정 
			-Private Key : Enter directly 선택 후 마스터 노드의 개인키 값을 입력 

	-Host Key Verification Strategy : Known hosts file Verification Strategy
		*( Slave 노드에서 /var/lib/jenkins/.ssh/ 디렉토리 생성 후, .ssh에 있는 known_hosts를 복사해둘것)
	
	-고급 
		-Port : SSH Port
		-JavaPath : Slave Node의 JAVA위치 ( readlink -f /bin/java )
	
	생성 완료 후 Launch agent 연결 진행. ( 오류발생하는지 로그정보를 확인 )


[PIPELINE] 
NEW ITEM > Pipeline 로 추가 

-Pipeline script
============================================================================
pipeline {
  agent any
  stages {
      stage('execute ls command') {
        steps {
          echo 'execute ls command'
          sh 'ls -la'
        }
      }
      stage('Where do ls command execute?') {
        steps {
          echo 'Here is default.'
          sh 'ls -la'
          echo 'you can define where to execute command.'
          echo 'For example, I want to view root directory'
          sh 'ls -la /'
        }
      }
      stage('Is there any other way?') {
        steps {
          echo 'Maybe sh is independent'
          sh 'cd /'
          sh 'pwd'
          sh 'ls -la'
          echo 'If you want to execute multiple commands in one sh.'
          sh '''cd /
          pwd
          ls -la'''
        }
      }
    }
  }
============================================================================  
  
*각 Node별로 stage 진행 
=====================================
pipeline {
    agent{
        label 'master'
    }
  stages {
      stage('Master_Check') {
        steps {
          echo 'execute ls command'
          sh 'pwd; ls -la'
          sh 'hostname'
        }
      }
       stage('Slave_Check') {
       agent {
	    label 'master'
        }
        steps {
          echo 'execute ls command'
          sh 'pwd; ls -la'
          sh 'hostname'
        }
      }
    }
 }
=====================================  


* Host key verification failed. 오류 발생 시
[Master]
cp /root/.ssh/id_rsa* .
chown jenkins.jenkins ./*

-ssh 명령어에 옵션 추가 
ssh -o StrictHostKeyChecking=no root@vm-2 pwd

ex) 
=================================================================
pipeline {
	agent{
        label 'master'
    }
	stages {
      stage('SSH_Check') {
        steps {
          sh 'pwd; ls -la'
          sh 'ssh -o StrictHostKeyChecking=no root@vm-2 pwd'
          sh 'ssh -o StrictHostKeyChecking=no root@vm-2 ls -la'
        } 
      }
      stage('SCP copy') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'vm-001-private-key', keyFileVariable: 'MY_SSH_KEY')]) {
                    sh '''
					echo test > result.txt
                    scp -i $MY_SSH_KEY result.txt root@vm-2:/root
                    '''
                }
            }
        }
    }
 }
 
===================================================================== 


[git webhook 구성하기]
*git push > webhook(일종의 트리거역할)을 통해 자동빌드 진행 > slave의 workspace/프로젝트명 디렉토리에 clone됨.

-github token 발급 
	github 계정아이콘 클릭하여 settings > Developer Settings >Personal access tokens (classic)
						> generate new token > generate new token(classic)
						
	체크 항목 : repo, admin:org, admin:repo_hook
	
	generate 후 표기되는 token을 복사 ( 한번 생성하면 이후에 다시 나오지않으므로 복사해둘것.)
	
-github webhook 설정 
	사용할 repository를 선택 후, settings > webhooks > add webhook 으로 이동 
	
	Payload URL : http://[jenkins주소]/github-webhook/
	Content type : application/json

-github 토큰을 jenkins credential 으로 등록 
	Jenkins 관리 > Credentials > System 클릭 > Global credentials (unrestricted) 클릭 > Add credentials 
	
	*option
		- Scope : global 
		- username : github id 입력 
		- password : github token 입력
		- ID : credential 명칭 입력 
	
- webhook 동작 테스트 진행
	new item > pipiline
		
		*option
			General : GitHub project 체크 , Project url에 repository 주소 복사 
			Build Triggers : GitHub hook trigger for GITScm polling
			script :
			================================================================================
			pipeline {
				agent {
					label 'slave'    
				}
				stages {
					stage('Check Path') {
						steps {
							sh '''hostname 
								  hostname -i 
								  pwd'''
						}
					}
					stage('Checkout') {
						steps {
							git branch: 'master',
								credentialsId: 'github_token',
								url: 'https://github.com/wocheon/docker_images.git'
						}
					}
					stage('Deploy') {
						steps {
							sh '''cp -f index.html /var/www/html/index.html
								curl localhost
							   '''
						}
					}
				}
			}
			===============================================================================

	생성 완료 후 수동으로 빌드 시 문제없는지 확인.
	
	웹상에서 commit 생성 후 빌드가 진행되는지 확인.
	local에서 push 후에도 정상적으로 빌드 되는지 확인.


* 최종 구성도
로컬에서 docker image 등을 수정 후 git push 
> git webhook 
> jenkins pipeline 진행 ( 빌드 => 테스트 => 배포) 
> slave node에 docker container 생성 > 확인 