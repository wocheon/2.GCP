[tomcat 설치 및 기동]
*JDK 는 jenkins slave노드로 사용을 위해 11버전으로 설치
-JDK 설치 
yum install -y java-11-openjdk-devel.x86_64

$readlink -f /bin/java
/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64/bin/java

vi /etc/profile
=================================================
JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64
PATH=$PATH:$JAVA_HOME/bin
CLASSPATH=$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar
=================================================

source /etc/profile 

--tomcat 설치 
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.90/bin/apache-tomcat-8.5.90.tar.gz
tar -zxvf apache-tomcat-8.5.90.tar.gz 

mv apache-tomcat-8.5.90/ tomcat
mv tomcat /usr/local/lib/


vi /etc/profile
=================================================
JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.19.0.7-1.el7_9.x86_64
JRE_HOME=$JAVA_HOME/jre

CATALINA_HOME=/usr/local/lib/tomcat
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$CATALINA_HOME/bin
CLASSPATH=.:$JAVA_HOME/lib/tools.jar:$CATALINA_HOME/lib/jsp-api.jar:$CATALINA_HOME/lib/servlet-api.jar
=================================================

-- tomcat 기동확인
cd /usr/local/lib/tomcat/bin/
./startup.sh
curl localhost:8080
./shutdown.sh

-- tomcat 서비스 등록 
$ vi /etc/systemd/system/tomcat.service
########################################
[Unit]
Description=tomcat
After=network.target syslog.target

[Service]
Type=forking
Environment=/usr/local/lib/tomcat
User=root
Group=root
ExecStart=/usr/local/lib/tomcat/bin/startup.sh
ExecStop=/usr/local/lib/tomcat/bin/shutdown.sh

[Install]
WantedBy=multi-user.target
########################################

systemctl status tomcat 
systemctl enable tomcat --now



* maven으로 웹프로젝트 생성 및 빌드 테스트 

[maven 설치]
yum install -y maven
maven -v

[maven web project 생성]
mkdir mvn_test
mvn archetype:generate -DgroupId=com.companyname.automobile -DartifactId=test -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

[warfile 생성]
- pom.xml 파일 위치에서 mvn clean package
- target 디렉토리에 war파일 생성확인

[결과확인]
빌드된 프로젝트가 tomcat에서 정상적으로 동작하는지 확인
cp test.war $CATALINA_HOME/webapps/

브라우저 접속 : http://localhost:8080/test


[Jenkins로 war 파일 배포]

- 개요 : gitlab 프로젝트에 maven 프로젝트를 업로드 후, push가 발생하면
		jenkins에서 빌드 진행 > war 파일을 포함한 tomcat 도커 이미지를 작성.
			> docker container로 서비스를 배포.

- 사전 설정 :
	1.gitlab에서 신규 프로젝트 추가후 jenkins systme에 정보 등록 
	(API token 생성하여 credential 등록 후 GitLab connections 등록)

	2.jenkins 관리 > tools > Maven
		jenkins서버의 maven 정보 등록 
		$ mvn -version 로 확인 후 MAVEN_HOME 등록 
		(Install automatically 체크 해제)

	3. 추후 build trigger 설정 시 webhook 설정

[maven build test]
	New item > Maven Project 
	* 소스코드 관리 
			- git 
			Repository URL : https://testdomainname.info/wocheon/mvn_project.git
			Credentials : NONE
			*branch 확인할것.
			
	*Build Steps
			Maven Version :
			Goals : clean package

	=> git pull 완료후 build 까지 정상적으로 되는것을 확인.


[Docker - tomcat 테스트 ]

vi dockerfile
================================================
FROM openjdk:8-jdk

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
RUN mkdir -p "$CATALINA_HOME"
WORKDIR ${CATALINA_HOME}

RUN apt-get install -y wget

RUN wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.90/bin/apache-tomcat-8.5.90.tar.gz;
RUN tar -xf apache-tomcat-8.5.90.tar.gz  --strip-components=1;

RUN find . -name "*.bat" -exec rm -rf {} \;
RUN rm -rf *tomcat*.tar.gz;
RUN mv webapps webapps.org
RUN mkdir webapps

COPY ./ROOT.war $CATALINA_HOME/webapps
EXPOSE 8080
CMD ["catalina.sh", "run"]
==========================================================

docker build -t web-app .
docker run -d -it -p 8090:8080 --name web-app web-app



*pipeline으로 배포 진행.

gitlab - Jenkins(maven) - docker 
  (push)	 (build)	(build&deploy)
========================================================================
pipeline {
	agent {
		label 'slave'    
	}
	stages {
		stage('Check Current Path') {
			steps {
				sh '''hostname 
					  hostname -i 
					  pwd
					  ls -lrth
					  '''
			}
		}
		stage('Gitlab Checkout') {
			steps {
				git branch: 'main',
					credentialsId: 'mvn_project',
					url: 'https://testdomainname.info/wocheon/mvn_project.git'
				sh 'ls -lrth'
			}
		}		
		stage('Build_Warfile') {
			steps {
				sh '''
					mvn clean package
					cd target
					mv test.war ROOT.war
					ls -lrth 
					 '''
			}
		}								
		stage('Build_Dockerfile') {
			steps {
				sh '''
					pwd
					ls -lrth
					docker build -t web-app .
					docker image ls
				   '''
			}
		}						
		stage('Deploy') {
			steps {
				sh '''
				    docker rm web-app -f
					docker run -d -it -p 8090:8080 --name web-app web-app
					docker container ls -a
					sleep 3
					curl localhost:8090					
				   '''
			}
		}
	}
}
============================================================================