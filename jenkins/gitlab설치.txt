

[GITLAB 설치 - 패키지 설치]
머신 유형 : e2-standard-2 
( GITLAB 공식 - 최소사양 4core 4GB RAM - 500명이상 사용가능
	테스트 결과 CPU 사용량보다 RAM 사용량이 문제로 보여 
	2 core 8GB RAM으로 설정하였음 ) 


-필수 종속성 설치
yum install -y postfix
systemctl enable postfix --now


-gitlab 설치
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash


EXTERNAL_URL="localhost" yum install -y gitlab-ce


--root 로그인 
--root 접속
ID : root  
passwd : cat /etc/gitlab/initial_root_password


[GITLAB 설치 - docker-compose로 설치]

--docker 설치 
yum install -y docker 
systemctl enable docker --now 
docker --version

--docker-compose 설치 
curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
docker-compose --version

--gitlab yml파일 작성 
vi docker-compose.yml
--------------------------------------------------
version: '3.6'
services:
  web:
    image: 'gitlab/gitlab-ce:latest'
    restart: always
    hostname: 'gitlab.example.com'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://localhost'
    ports:
      - '80:80'
      - '443:443'
      - '10022:22'
    volumes:
      - '$GITLAB_HOME/config:/etc/gitlab'
      - '$GITLAB_HOME/logs:/var/log/gitlab'
      - '$GITLAB_HOME/data:/var/opt/gitlab'
    shm_size: '256m'
--------------------------------------------------


* 기존 docker 버전(1.13.1)으로 진행시 
ThreadError: can't create Thread: Operation not permitted 오류 발생하므로
docker version 업그레이드 필요. (docker 20.10.10 이상)

--기존버전 확인 
docker --version => 1.13.1

--기존 컨테이 삭제 
docker rm root_web_1 -f

--yum update 및 기존 docker 삭제 
yum update
yum remove -y docker-common


--docker 공식 repo 추가 
yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

--설치가능한 도커 버전 확인
yum list docker-ce --showduplicates | sort -r

--docker 최신버전 설치 
yum install -y docker-ce.x86_64

--버전확인 
docker --version
Docker version 24.0.5, build ced0996


--docker-compose run 
docker-compse up -d 

--컨테이너 확인
docker ps 

--컨테이너 로그 조회 ( 컨테이너 올린후 3분정도 소요)
docker logs -f 


--접속 URL 
http://localhost

--root 접속
ID : root  
passwd : /root/gitlab/config/initial_root_password 확인

--신규 유저 생성 시 pending상태로 요청되며 root계정으로 접속후에 승인해야 정상적으로 등록.

--project(repository) 생성후 테스트 진행.
 


[gitlab https 적용방법]
-도메인 필요

$ vi /etc/gitlab/gitlab.rb
-------------------------------------------------
external_url 'https://testdomainname.info'
...

################################################################################
# Let's Encrypt integration
################################################################################
 letsencrypt['enable'] = true
 letsencrypt['contact_emails'] = ['wocheon07@gmail.com'] # This should be an array of email addresses to add as contacts
 letsencrypt['key_size'] = 2048

#자동갱신 적용시에 활성화
 letsencrypt['auto_renew'] = true
 letsencrypt['auto_renew_hour'] = 12
 letsencrypt['auto_renew_minute'] = 30 # Should be a number or cron expression, if specified.
 letsencrypt['auto_renew_day_of_month'] = "*/7"
 letsencrypt['auto_renew_log_directory'] = '/var/log/gitlab/lets-encrypt'
-----------------------------------------------------------------------------------------------------

$ gitlab-ctl reconfigure


/etc/gitlab/ssl 디렉토리 생성확인 및 https로 접속 확인. (clone URL도 https가 적용됨)


[github repository import 활성화 ]
--gitlab 세팅
Admin Area > Settings > General > Visibility and access controls
Import sources 에서 github 체크 후 save&change

--github에서 token 발행 
setting > Developer Settings >  Personal access tokens
(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)


Import project 에서 github 선택후 토큰 붙여넣기

*import 완료된 project에 발생하는 push, commit등은 github와 동기화되지는 않는다.

[gitlab ssl인증서 에러 발생시]
ex)
fatal: unable to access 'https://testdomainname.info/wocheon/docker_images.git/': SSL certificate problem: self-
signed certificate in certificate chain

git config --global http.sslVerify false
	or
export GIT_SSL_NO_VERIFY=0

[한글설정]